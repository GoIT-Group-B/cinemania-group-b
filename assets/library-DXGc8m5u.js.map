{"version":3,"mappings":"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","names":["IMG_BASE_URL","mainContainer","genreMap","invertedGenreMap","acc","id","name","populateGenreDropdown","selectElement","genreName","option","loadLibrary","filterGenre","allMovies","moviesToRender","targetGenreId","movie","hasGenre","_a","noMoviesMarkup","genreDropdown","genreDropdownElement","markup","title","poster_path","release_date","vote_average","genre_ids","year","movieGenres","starRating","createStarRating","card","m","showDetailsModal","__vitePreload","n","genreNames","currentGenreDropdown","event","selectedGenre"],"ignoreList":[],"sources":["../../src/js/library.js"],"sourcesContent":["import { createStarRating } from './stars';\nconst IMG_BASE_URL = 'https://image.tmdb.org/t/p';\n\nconst mainContainer = document.querySelector('.library-gallery');\n\nconst genreMap = {\n  28: 'Action',\n  12: 'Adventure',\n  16: 'Animation',\n  35: 'Comedy',\n  80: 'Crime',\n  99: 'Documentary',\n  18: 'Drama',\n  10751: 'Family',\n  14: 'Fantasy',\n  36: 'History',\n  27: 'Horror',\n  10402: 'Music',\n  9648: 'Mystery',\n  10749: 'Romance',\n  878: 'Science Fiction',\n  10770: 'TV Movie',\n  53: 'Thriller',\n  10752: 'War',\n  37: 'Western',\n};\n\nconst invertedGenreMap = Object.entries(genreMap).reduce((acc, [id, name]) => {\n  acc[name.toLowerCase()] = parseInt(id);\n  return acc;\n}, {});\n\nfunction populateGenreDropdown() {\n  const selectElement = mainContainer.querySelector('.dropdown select');\n  if (!selectElement) return;\n\n  selectElement.innerHTML = `<option class=\"hidden-option\" value=\"Genre\" selected disabled>Genre</option>`;\n\n  Object.values(genreMap)\n    .sort()\n    .forEach(genreName => {\n      const option = document.createElement('option');\n      option.value = genreName.toLowerCase();\n      option.textContent = genreName;\n      selectElement.appendChild(option);\n    });\n}\n\nexport function loadLibrary(filterGenre = null) {\n  const allMovies = JSON.parse(localStorage.getItem('myLibrary')) || [];\n  let moviesToRender = allMovies;\n\n  console.log('--- loadLibrary Çağrısı ---');\n  console.log(\"Mevcut Tüm Filmler (localStorage'dan):\", allMovies);\n  console.log('Seçilen Filtre Türü (filterGenre):', filterGenre);\n\n  if (filterGenre && filterGenre !== 'Genre') {\n    const targetGenreId = invertedGenreMap[filterGenre];\n\n    console.log(\n      `Filtreleme için ID: ${targetGenreId} (Türe göre: ${filterGenre})`\n    );\n\n    if (targetGenreId) {\n      moviesToRender = allMovies.filter(movie => {\n        const hasGenre = movie.genre_ids?.includes(targetGenreId);\n        console.log(\n          `Film: ${movie.title}, Genre ID'leri: ${movie.genre_ids}, Hedef ID: ${targetGenreId}, Sonuç: ${hasGenre}`\n        );\n        return hasGenre;\n      });\n      console.log(`Filtrelenmiş filmler (${filterGenre}):`, moviesToRender);\n    } else {\n      console.warn(\n        `\"${filterGenre}\" için geçerli bir tür ID'si bulunamadı. Filtreleme yapılmadı.`\n      );\n      moviesToRender = allMovies;\n    }\n  }\n\n  mainContainer.innerHTML = '';\n\n  if (moviesToRender.length === 0) {\n    const noMoviesMarkup = `\n      <div class=\"my-library-no-movies\">\n        <p class=\"my-library-oops-message\">\n          OOPS...<br />\n          We are very sorry! <br />\n          ${\n            filterGenre && filterGenre !== 'Genre'\n              ? `No movies found for '${filterGenre}' genre.`\n              : `You don't have any movies at your library.`\n          }\n        </p>\n        <button>\n          <a href=\"../catalog.html\" class=\"my-library-search-link button\">Search movie</a>\n        </button>\n      </div>\n    `;\n    mainContainer.innerHTML = noMoviesMarkup;\n    const genreDropdown = mainContainer.querySelector('.dropdown select');\n    if (genreDropdown) {\n      genreDropdown.classList.add('visually-hidden');\n    }\n    return;\n  }\n\n  let genreDropdownElement = mainContainer.querySelector('.dropdown select');\n  if (!genreDropdownElement) {\n    const dropdownMarkup = `\n      <div class=\"dropdown\">\n        <select>\n          <option class=\"hidden-option\" value=\"Genre\" selected disabled>Genre</option>\n        </select>\n      </div>\n    `;\n    mainContainer.insertAdjacentHTML('afterbegin', dropdownMarkup);\n    genreDropdownElement = mainContainer.querySelector('.dropdown select');\n    populateGenreDropdown();\n  } else {\n    genreDropdownElement.classList.remove('visually-hidden');\n  }\n\n  if (filterGenre && genreDropdownElement.options.length > 1) {\n    genreDropdownElement.value = filterGenre;\n  }\n\n  const markup = moviesToRender\n    .map(movie => {\n      const { id, title, poster_path, release_date, vote_average, genre_ids } =\n        movie;\n      const year = release_date ? release_date.split('-')[0] : 'N/A';\n      const movieGenres =\n        genre_ids\n          ?.map(id => genreMap[id])\n          .filter(Boolean)\n          .join(', ') || '';\n\n      const starRating = createStarRating(vote_average);\n\n      return `\n        <div class=\"movie-card\" data-id=\"${id}\">\n          <div class=\"poster-wrapper\">\n            <img src=\"${IMG_BASE_URL}/w500${poster_path}\" alt=\"${title}\" class=\"movie-poster\" />\n            <div class=\"movie-info-overlay\">\n              <div class=\"movie-meta\">\n                <h3 class=\"movie-title\">${title}</h3>\n                <p class=\"movie-details\">${movieGenres} | ${year}</p>\n              </div>\n              <div class=\"movie-rating\">${starRating}</div>\n            </div>\n          </div>\n        </div>\n      `;\n    })\n    .join('');\n\n  mainContainer.insertAdjacentHTML('beforeend', markup);\n\n  mainContainer.querySelectorAll('.movie-card').forEach(card => {\n    card.addEventListener('click', async () => {\n      const id = Number(card.dataset.id);\n      const data = JSON.parse(localStorage.getItem('myLibrary')) || [];\n      const movie = data.find(m => m.id === id);\n\n      if (movie) {\n        const { showDetailsModal } = await import('./modal.js');\n        const genreNames =\n          movie.genre_ids?.map(id => genreMap[id]).filter(Boolean) || [];\n        showDetailsModal(movie, genreNames);\n      }\n    });\n  });\n\n  const currentGenreDropdown = mainContainer.querySelector('.dropdown select');\n  if (currentGenreDropdown) {\n    currentGenreDropdown.onchange = event => {\n      const selectedGenre = event.target.value;\n      loadLibrary(selectedGenre);\n    };\n  }\n}\n\nloadLibrary();\n"],"file":"assets/library-DXGc8m5u.js"}